openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email: t–æ
          type: string
        password:
            type: string

    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string

    Order:
      type: object
      properties:
        userID:
          type: integer
          format: int64
        itemsList:
          type: array
          format: int64
        itemsCounts:
          type: array
          format: int64

paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}

  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
      security:
        - api_key: [ ]

  /items:
    post:
      summary: "Add a new item to the store"
      operationId: "CreateItem"

      parameters:
        - in: "header"
          name: "body"
          description: "Item object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Item"
      responses:
        "200":
            description: successful add item
            content: { }
        "405":
          description: "Invalid input"
      security:
        - api_key: [ ]

  /items/upload_image:
    post:
      summary: "uploads an image"
      operationId: "uploadFile"

      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary

      responses:
        "200":
          description: successful add item
          content: { }
      security:
      - api_key: []

  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: { }
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
      requestBody:
        content:
          Application/json:
            schema:
              type: string
              format: binary
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - api_key: [ ]

    delete:
        summary: Deletes a item
        operationId: DeleteItem
        parameters:
          - name: itemId
            in: path
            description: Item id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          400:
            description: Invalid ID supplied
            content: { }
          404:
            description: Item not found
            content: { }
        security:
          - api_key: [ ]

  /items/filter:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
        - name: price_min
          in: query
          description: Lower price limit
          required: false
          schema:
            type: integer
            format: int64
        - name: price_max
          in: query
          description: Upper price limit
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: { }

  /order:
    get:
      summary: get current order
      operationId: getOrder
      security:
        - api_key: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      summary: Add new order
      operationId: newOrder
      security:
        - api_key: [ ]
      parameters:
        - name: itemsList
          in: query
          description: Items List
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Order'

      responses:
        200:
          description: successful operation
          content: {}

        400:
          description: common error
          content: {}
