openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email: tо
          type: string
        password:
            type: string
paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
        502:
          description: dfdfdfddf
          content: {}

  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
      securityDefinitions:
          api_key:
            type: "apiKey"
            name: "api_key"
            in: "header"

    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer // чтобы не потерять точность, денежные поля мы будем передавать
          format: int64 // в виде целочисленного значения минимальной размерности валюты (например, центы или копейки)
        image_link:
          type: string
          /items:
            post:
              summary: "Add a new item to the store"
              operationId: "CreateItem"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              parameters:
                - in: "body"
                  name: "body"
                  description: "Item object that needs to be added to the store"
                  required: true
                  schema:
                    $ref: "#/definitions/Item"
              responses:
                "405":
                  description: "Invalid input"
              security:
                - api_key: [ ]
                  /items/upload_image:
                    post:
                      summary: "uploads an image"
                      operationId: "uploadFile"
                      consumes:
                        - "multipart/form-data"
                      produces:
                        - "application/json"
                      parameters:
                        - name: "additionalMetadata"
                          in: "formData"
                          description: "Additional data to pass to server"
                          required: true
                          type: "string"
                        - name: "file"
        in: "formData"
        description: "file to upload"
        required: true
        type: "file"
      responses:
      security:
        - api_key: []
          /items/{itemId}:
            get:
              summary: Find item by ID
              operationId: GetItem
              parameters:
                - name: itemId
                  in: path
                  description: ID of item to return
                  required: true
                  schema:
                    type: integer
                    format: int64
              responses:
                200:
                  description: successful operation
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Item'
                400:
                  description: Invalid ID supplied
                  content: { }
            put:
              summary: Updates a item in the store with form data
              operationId: UpdateItem
              parameters:
                - name: itemId
                  in: path
                  description: ID of item that needs to be updated
                  required: true
                  schema:
                    type: integer
                      format: int64
                      requestBody:
                        content:
                          application/json:
                            schema:
                              properties:
                                name:
                                  type: string
                                  description: Updated name of the item
                                status:
                                  type: string
                                  description: Updated status of the item
                      responses:
                        405:
                          description: Invalid input
                          content: { }
                      security:
                        - api_key: [ ]
                    delete:
                      summary: Deletes a item
                      operationId: DeleteItem
                      parameters:
                        - name: itemId
                          in: path
                          description: Item id to delete
                          required: true
                          schema:
                            type: integer
                            format: int64
                      responses:
                        400:
                          description: Invalid ID supplied
                          content: { }
                        404:
                          description: Item not found
                          content: { }
                      security:
                        - api_key: [ ]
                          /items:
                            get:
                              summary: Lists Items with filters
                              operationId: ListItems
                              parameters:
                                - name: price_min
                                  in: query
                                  description: Lower price limit
                                  required: false
                                  schema:
                                    type: integer
                                    format: int64
                                - name: price_max
                                  in: query
                                  description: Upper price limit
                                  required: false
                                  schema:
                                    type: integer
                                    format: int64
                              responses:
                                200:
                                  description: successful operation
                                  content:
                                    application/json:
                                      schema:
                                        type: array
                                        items:
                                          $ref: '#/components/schemas/Item'
                                400:
                                  description: Invalid price range
                                  content: { }